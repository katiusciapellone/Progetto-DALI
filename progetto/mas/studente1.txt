:- dynamic ho_progetto/1.
:- dynamic traccia/1, ho_scelto/1.
:- dynamic ho_ricevimento/1.
:- dynamic specifiche_pubblicate/1.
:- dynamic tempo_attesa/1.
:- dynamic ho_finito/1, ho_consegnato/1.
:- dynamic ho_salutato/1.

stato(sveglio).
ho_salutato(no).
tempo_attesa(0).
ho_progetto(no).
ho_scelto(no).
specifiche_pubblicate(no).
ho_finito(no).
ho_consegnato(no).
ho_ricevimento(no).

sveglia :- stato(sveglio), tempo_attesa(0), ho_salutato(no).
svegliaI :> write('Ciao a tutti, sono sveglio'), nl, nl, retract(ho_salutato(no)), assert(ho_salutato(si)).

attendoSpecifiche :- ho_progetto(no), specifiche_pubblicate(no), tempo_attesa(T), T < 3, ho_salutato(si).
attendoSpecificheI :> write('Attendo le specifiche del progetto'), nl, 
		      sleep(10), tempo_attesa(T), T1 is T+1, retract(tempo_attesa(T)), assert(tempo_attesa(T1)).

pubblicazioneE :> write('Ho visto le specifiche!'), nl, nl, retract(specifiche_pubblicate(no)), assert(specifiche_pubblicate(si)).

noPubblicazione :- specifiche_pubblicate(no), tempo_attesa(T), T >= 3.
noPubblicazioneI :> write('Il prof non ha pubblicato nulla, mando un messaggio'), nl, messageA(prof, send_message(sollecito, Me)).

scelgoTraccia :- ho_progetto(no), specifiche_pubblicate(si), ho_scelto(no).
scelgoTracciaI :> write('Ora posso scegliere il progetto'), nl, random(1, 8, T), assert(traccia(T)), write('Ho scelto la traccia: '), write(T), nl, retract(ho_scelto(no)), assert(ho_scelto(si)).


contattoProf :- ho_progetto(no), ho_scelto(si), traccia(T), ho_ricevimento(no).
contattoProfI :> nl, write('Invio proposta al professore'), nl, traccia(T), messageA(prof, send_message(proposta(studente1, T), Me)).

accettataE :> nl, write('Grazie, posso iniziare a lavorare'), nl, retract(ho_progetto(no)), assert(ho_progetto(si)).

rifiutataE :> nl, write('Traccia rifiutata, chiedo ricevimento'), nl, 
	      messageA(prof, send_message(richiestaRicevimento(studente1), Me)).

ricevimentoE(Quando) :> nl, write('Ho ricevuto la data per il ricevimento, lo segno in agenda'), nl, 
			assert(ho_ricevimento(Quando)), retract(ho_ricevimento(no)).

ricevimento_fattoE(T) :> nl, write('Ho fatto il ricevimento, ora ho la traccia su cui lavorare'), nl, 
			 assert(traccia(T)), retract(ho_progetto(no)), assert(ho_progetto(si)).



lavoro :- ho_finito(no), ho_progetto(si), traccia(T).
lavoroI :> write('Sto implementando'), nl, sleep(5), write('Scrivo documentazione'), nl, sleep(5), retract(ho_finito(no)), assert(ho_finito(si)).

consegno :- ho_finito(si), ho_consegnato(no).
consegnoI :> nl, write('Consegno il progetto'), nl, messageA(prof, send_message(consegna(studente1, link1), Me)), retract(ho_consegnato(no)), assert(ho_consegnato(si)).

votoE(V) :> write('Ho preso '), write(V), write('!'), nl. 
